{
	"name": "data-ingestion-delimited",
	"properties": {
		"activities": [
			{
				"name": "Get Delimited File MetaData",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Create the Child Execution Log",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "delmited_ingestion_input_file",
						"type": "DatasetReference",
						"parameters": {
							"filePath": {
								"value": "@pipeline().parameters.filePath",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.fileName",
								"type": "Expression"
							},
							"containerName": {
								"value": "@pipeline().parameters.ingestionContainerName",
								"type": "Expression"
							},
							"compressionType": "none",
							"compressionLevel": "Optimal",
							"columnDelimiter": ",",
							"encoding": "UTF-8",
							"escapeCharacter": "\\",
							"quoteCharacter": "\"",
							"firstRowAsHeader": true
						}
					},
					"fieldList": [
						"size",
						"columnCount",
						"itemName",
						"structure"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Set The Path Based on the LoadType",
				"description": "",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Delimited File MetaData",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "calculatedPath",
					"value": {
						"value": "@if(equals(pipeline().parameters.loadType,'FULL'), pipeline().parameters.rawDestination, concat(pipeline().parameters.rawDestination, formatDateTime(pipeline().TriggerTime, 'yyyy'), '/', formatDateTime(pipeline().TriggerTime, 'MM'), '/', formatDateTime(pipeline().TriggerTime, 'dd'), '/'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "FileSize gt 0 and ColumnCount Expected",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set The Path Based on the LoadType",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(greater(activity('Get Delimited File MetaData').output.size, 0),equals(pipeline().parameters.columnCount, activity('Get Delimited File MetaData').output.columnCount))",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "execute data ingestion error",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "data-ingestion-error",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"ingestionContainerName": {
										"value": "@pipeline().parameters.ingestionContainerName",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"filePath": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"errorContainerName": {
										"value": "@pipeline().parameters.errorContainerName",
										"type": "Expression"
									},
									"parentDataFactoryRunId": {
										"value": "@pipeline().parameters.parentDataFactoryRunId",
										"type": "Expression"
									}
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Copy Delimited File From",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "delmited_ingestion_input_file",
									"type": "DatasetReference",
									"parameters": {
										"filePath": {
											"value": "@pipeline().parameters.filePath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										},
										"containerName": {
											"value": "@pipeline().parameters.ingestionContainerName",
											"type": "Expression"
										},
										"compressionType": {
											"value": "@pipeline().parameters.compressionType",
											"type": "Expression"
										},
										"compressionLevel": {
											"value": "@pipeline().parameters.compressionLevel",
											"type": "Expression"
										},
										"columnDelimiter": {
											"value": "@pipeline().parameters.columnDelimiter",
											"type": "Expression"
										},
										"encoding": {
											"value": "@pipeline().parameters.encoding",
											"type": "Expression"
										},
										"escapeCharacter": {
											"value": "@pipeline().parameters.escapeCharacter",
											"type": "Expression"
										},
										"quoteCharacter": {
											"value": "@pipeline().parameters.quoteCharacter",
											"type": "Expression"
										},
										"firstRowAsHeader": {
											"value": "@pipeline().parameters.firstRowAsHeader",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "data_ingestion_raw_output_file_parquet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ingestionOutputContainerName",
											"type": "Expression"
										},
										"filePath": {
											"value": "@variables('calculatedPath')",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Delete the Landed File",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "Copy Delimited File From",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "delmited_ingestion_input_file",
									"type": "DatasetReference",
									"parameters": {
										"filePath": {
											"value": "@pipeline().parameters.filePath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										},
										"containerName": {
											"value": "@pipeline().parameters.ingestionContainerName",
											"type": "Expression"
										},
										"compressionType": "none",
										"compressionLevel": "Optimal",
										"columnDelimiter": ",",
										"encoding": "UTF-8",
										"escapeCharacter": "\\",
										"quoteCharacter": "\"",
										"firstRowAsHeader": true
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								}
							}
						}
					]
				}
			},
			{
				"name": "Create the Child Execution Log",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[CreateChildExecutionLog]",
					"storedProcedureParameters": {
						"DataFactoryName": {
							"value": {
								"value": "@pipeline().DataFactory",
								"type": "Expression"
							},
							"type": "String"
						},
						"DataFactoryRunId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"ExecutionStartDateTime": {
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							},
							"type": "String"
						},
						"FileName": {
							"value": {
								"value": "@pipeline().parameters.fileName",
								"type": "Expression"
							},
							"type": "String"
						},
						"ParentDataFactoryRunId": {
							"value": {
								"value": "@pipeline().parameters.parentDataFactoryRunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"PipelineName": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "meta_data_configuration_db",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "End the Child Execution Log",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "FileSize gt 0 and ColumnCount Expected",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[EndChildExecutionLog]",
					"storedProcedureParameters": {
						"DataFactoryRunId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"ParentDataFactoryRunId": {
							"value": {
								"value": "@pipeline().parameters.parentDataFactoryRunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "meta_data_configuration_db",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"fileName": {
				"type": "string",
				"defaultValue": "buyinggroups.csv"
			},
			"filePath": {
				"type": "string",
				"defaultValue": "/"
			},
			"rawDestination": {
				"type": "string",
				"defaultValue": "WorldWideImporters/buyinggroups/"
			},
			"rawDestinationFileName": {
				"type": "string",
				"defaultValue": "buyinggroups.parquet"
			},
			"columnCount": {
				"type": "int",
				"defaultValue": 5
			},
			"loadType": {
				"type": "string",
				"defaultValue": "FULL"
			},
			"ingestionContainerName": {
				"type": "string",
				"defaultValue": "landing"
			},
			"ingestionOutputContainerName": {
				"type": "string",
				"defaultValue": "raw"
			},
			"compressionType": {
				"type": "string",
				"defaultValue": "none"
			},
			"compressionLevel": {
				"type": "string",
				"defaultValue": "Optimal"
			},
			"columnDelimiter": {
				"type": "string",
				"defaultValue": ","
			},
			"encoding": {
				"type": "string",
				"defaultValue": "UTF-8"
			},
			"escapeCharacter": {
				"type": "string",
				"defaultValue": "\\"
			},
			"quoteCharacter": {
				"type": "string",
				"defaultValue": "\""
			},
			"firstRowAsHeader": {
				"type": "bool",
				"defaultValue": true
			},
			"errorContainerName": {
				"type": "string",
				"defaultValue": "error"
			},
			"parentDataFactoryRunId": {
				"type": "string",
				"defaultValue": "864d42c4-6177-417a-8bf2-36881ca5ba64"
			}
		},
		"variables": {
			"calculatedPath": {
				"type": "String"
			}
		},
		"folder": {
			"name": "data-ingestion"
		},
		"annotations": []
	}
}