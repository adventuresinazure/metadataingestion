{
	"name": "data-ingestion-delimited",
	"properties": {
		"activities": [
			{
				"name": "Get Delimited File MetaData",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "delmited_ingestion_input_file",
						"type": "DatasetReference",
						"parameters": {
							"filePath": {
								"value": "@pipeline().parameters.filePath",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.fileName",
								"type": "Expression"
							},
							"containerName": {
								"value": "@pipeline().parameters.ingestionContainerName",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"size",
						"columnCount",
						"itemName",
						"structure"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Set The Path Based on the LoadType",
				"description": "",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Delimited File MetaData",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "calculatedPath",
					"value": {
						"value": "@if(equals(pipeline().parameters.loadType,'FULL'), pipeline().parameters.rawDestination, concat(pipeline().parameters.rawDestination, formatDateTime(pipeline().TriggerTime, 'yyyy'), '/', formatDateTime(pipeline().TriggerTime, 'MM'), '/', formatDateTime(pipeline().TriggerTime, 'dd'), '/'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set The Path Based on the LoadType",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(greater(activity('Get Delimited File MetaData').output.size, 0),equals(pipeline().parameters.columnCount, activity('Get Delimited File MetaData').output.columnCount))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy Delimited File From",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "delmited_ingestion_input_file",
									"type": "DatasetReference",
									"parameters": {
										"filePath": {
											"value": "@pipeline().parameters.filePath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										},
										"containerName": {
											"value": "@pipeline().parameters.ingestionContainerName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Delete the Landed File",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "Copy Delimited File From",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "delmited_ingestion_input_file",
									"type": "DatasetReference",
									"parameters": {
										"filePath": {
											"value": "@pipeline().parameters.filePath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										},
										"containerName": {
											"value": "@pipeline().parameters.ingestionContainerName",
											"type": "Expression"
										},
										"compressionType": "none",
										"compressionLevel": "Optimal",
										"columnDelimiter": ",",
										"encoding": "UTF-8",
										"escapeCharacter": "\\",
										"quoteCharacter": "\"",
										"firstRowAsHeader": true
									}
								},
								"enableLogging": true,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"fileName": {
				"type": "string",
				"defaultValue": "buyinggroups.csv"
			},
			"filePath": {
				"type": "string",
				"defaultValue": "/"
			},
			"rawDestination": {
				"type": "string",
				"defaultValue": "WorldWideImporters/buyinggroups/"
			},
			"rawDestinationFileName": {
				"type": "string",
				"defaultValue": "buyinggroups.parquet"
			},
			"columnCount": {
				"type": "int",
				"defaultValue": 5
			},
			"loadType": {
				"type": "string",
				"defaultValue": "FULL"
			},
			"ingestionContainerName": {
				"type": "string",
				"defaultValue": "landing"
			},
			"ingestionOutputContainerName": {
				"type": "string",
				"defaultValue": "raw"
			},
			"compressionType": {
				"type": "string",
				"defaultValue": "none"
			},
			"compressionLevel": {
				"type": "string",
				"defaultValue": "Optimal"
			},
			"columnDelimiter": {
				"type": "string",
				"defaultValue": ","
			},
			"encoding": {
				"type": "string",
				"defaultValue": "UTF-8"
			},
			"escapeCharacter": {
				"type": "string",
				"defaultValue": "\\"
			},
			"quoteCharacter": {
				"type": "string",
				"defaultValue": "\""
			},
			"firstRowAsHeader": {
				"type": "bool",
				"defaultValue": true
			}
		},
		"variables": {
			"calculatedPath": {
				"type": "String"
			}
		},
		"folder": {
			"name": "data-ingestion"
		},
		"annotations": []
	}
}