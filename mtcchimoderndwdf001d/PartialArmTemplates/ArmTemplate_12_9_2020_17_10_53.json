{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mtcchimoderndwdf001d"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/data-extraction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Retrieve Bearer Token",
						"description": "The Web Activity does not support OAuth authentication therefore it is a two step process.   Retrieve the bearer token and then use it wherever it is needed.",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantId, '/oauth2/v2.0/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=',pipeline().parameters.ClientId,'&scope=api://',pipeline().parameters.ClientId,'/.default&client_secret=',pipeline().parameters.ClientSecret)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set bearerToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Retrieve Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "bearerToken",
							"value": "[[object Object]"
						}
					},
					{
						"name": "Retrieve The Objects That Need to be Extracted",
						"description": "The web activity does not support OAuth2 therefore we pass the Bearer Token in the Header to get the data we need for the databaseType and sourceDatabaseName",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Start Logging of Activities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.loggingBaseURL, 'sourcedatabases?sourceDatabaseName=', pipeline().parameters.databaseName, '&databaseType=', pipeline().parameters.databaseType)",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', variables('bearerToken'))",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Switch to the Correct DataSource Type Pipeline",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Retrieve The Objects That Need to be Extracted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.databaseType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "SqlServer",
									"activities": [
										{
											"name": "data-extraction-sql",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "data-extraction-sql",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"platformToExtract": {
														"value": "@activity('Retrieve The Objects That Need to be Extracted').output.data",
														"type": "Expression"
													},
													"sourceDatabaseName": {
														"value": "@pipeline().parameters.databaseName",
														"type": "Expression"
													},
													"LogId": {
														"value": "@activity('Start Logging of Activities').output.data._id",
														"type": "Expression"
													},
													"BearerToken": {
														"value": "@variables('bearerToken')",
														"type": "Expression"
													},
													"loggingBaseURL": {
														"value": "@pipeline().parameters.loggingBaseURL",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Start Logging of Activities",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set bearerToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.loggingBaseURL,'executionlogs')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', variables('bearerToken'))",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@concat('{\"dataFactoryRunId\": \"', pipeline().RunId, '\", \"dataFactoryName\": \"', pipeline().DataFactory, '\", \"pipelineName\": \"', pipeline().Pipeline, '\", \"executionStatus\": \"In-Progress\", \"executionStartDate\": \"', utcnow(), '\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "End Logging Activities with Success",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Switch to the Correct DataSource Type Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.loggingBaseURL, 'executionlogs/', activity('Start Logging of Activities').output.data._id)",
								"type": "Expression"
							},
							"method": "PATCH",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', variables('bearerToken'))",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@concat('{\"executionStatus\": \"Success\", \"executionEndDate\": \"', utcnow(), '\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "End Logging Activities with Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Switch to the Correct DataSource Type Pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.loggingBaseURL, 'executionlogs/', activity('Start Logging of Activities').output.data._id)",
								"type": "Expression"
							},
							"method": "PATCH",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', variables('bearerToken'))",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@concat('{\"executionStatus\": \"Failure\", \"executionEndDate\": \"', utcnow(), '\"}')",
								"type": "Expression"
							}
						}
					}
				],
				"concurrency": 6,
				"parameters": {
					"databaseName": {
						"type": "string",
						"defaultValue": "WorldWideImporters"
					},
					"databaseType": {
						"type": "string",
						"defaultValue": "SqlServer"
					},
					"metadataConfigurationsContainer": {
						"type": "string",
						"defaultValue": "metadata-configurations"
					},
					"TenantId": {
						"type": "string",
						"defaultValue": "9367acf5-9e6b-4e3f-a344-94da27f8a0eb"
					},
					"ClientId": {
						"type": "string",
						"defaultValue": "15814337-9995-4df6-bf82-a08f33f9b2d1"
					},
					"ClientSecret": {
						"type": "string",
						"defaultValue": "6N_4~dXVT5n-Fd4It~T76.5E_iKmF9_yGf"
					},
					"loggingBaseURL": {
						"type": "string",
						"defaultValue": "https://data-engineering-dev.api.adventuresinazure.com/api/"
					}
				},
				"variables": {
					"bearerToken": {
						"type": "String",
						"defaultValue": "1234532"
					},
					"objectsToExtract": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "data-extraction"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/purview-test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"schema": "etl",
									"objectName": "customers",
									"connectionString": "WorldWideImportersConnectionString"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "data_ingestion_raw_output_file_parquet",
								"type": "DatasetReference",
								"parameters": {
									"containerName": "landing",
									"filePath": "worldwideimporters/customers/",
									"fileName": "customers.snappy.parquet"
								}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_storage_account')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "https://andrdatalake001d.dfs.core.windows.net"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ssis-purview-demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS package1",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "PurviewDemo/SSIS-With-Purview/Master_Package.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "ssisIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		}
	]
}