{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mtcchimoderndwdf001d"
		},
		"data_lake_storage_account_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://andrdatalake001d.dfs.core.windows.net"
		},
		"key_vault_secrets_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mtcchimoderndwkv001d.vault.azure.net/"
		},
		"ssisIntegrationRuntime_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "mtcchioltp001d.database.windows.net"
		},
		"ssisIntegrationRuntime_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "phandreo"
		},
		"ssisIntegrationRuntime_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		},
		"meta_data_configuration_db_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "MetaDataConfigurationConnectionString"
		},
		"meta_data_configuration_db_v2_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "MetaDataConfigurationMongoDB"
		},
		"meta_data_configuration_db_v2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "MetaDataConfiguration"
		},
		"worldwide_importers_db_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().databaseConnectionStringSecretName"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_storage_account')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('data_lake_storage_account_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/key_vault_secrets')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('key_vault_secrets_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ssisIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"nodeSize": "Standard_D2_v3",
						"numberOfNodes": 1,
						"maxParallelExecutionsPerNode": 2
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('ssisIntegrationRuntime_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('ssisIntegrationRuntime_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('ssisIntegrationRuntime_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": "S1"
						},
						"edition": "Enterprise",
						"licenseType": "BasePrice"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/avro_ingestion_input_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"containerName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data-ingestion-input"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_ingestion_error_output_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string"
					},
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data-ingestion-output"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_ingestion_raw_output_file_avro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "raw"
					},
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "invoices.avro"
					}
				},
				"folder": {
					"name": "data-ingestion-output"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_ingestion_raw_output_file_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "raw"
					},
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data-ingestion-output"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delmited_ingestion_input_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"containerName": {
						"type": "string"
					},
					"compressionType": {
						"type": "string",
						"defaultValue": "none"
					},
					"compressionLevel": {
						"type": "string",
						"defaultValue": "Optimal"
					},
					"columnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					},
					"escapeCharacter": {
						"type": "string",
						"defaultValue": "\\"
					},
					"quoteCharacter": {
						"type": "string",
						"defaultValue": "\""
					},
					"firstRowAsHeader": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "data-ingestion-input"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().columnDelimiter",
						"type": "Expression"
					},
					"compressionCodec": {
						"value": "@dataset().compressionType",
						"type": "Expression"
					},
					"compressionLevel": {
						"value": "@dataset().compressionLevel",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().encoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().escapeCharacter",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().firstRowAsHeader",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().quoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/error_ingestion_input_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"containerName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data-ingestion-input"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/json_ingestion_input_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"containerName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data-ingestion-input"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet_ingestion_input_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "data_lake_storage_account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"containerName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data-ingestion-input"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/data_lake_storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/databricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-6393053478803514.14.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "key_vault_secrets",
							"type": "LinkedServiceReference"
						},
						"secretName": "databricks",
						"secretVersion": "a311dd203b1c4d6abf113e7873711425"
					},
					"instancePoolId": "0806-153306-geode373-pool-KRKLmD5e",
					"newClusterNumOfWorker": "2",
					"newClusterSparkConf": {
						"fs.azure.account.key.andrdatalake001d.dfs.core.windows.net": "askZROyq8oZ+mOuAjLDjUZbmPSGeLnZ5UGUXMTWcQSDV4hYhVFzYSzfXKJqgkdFxrDZhiIB9B3c2qCKtXAhi8g==",
						"fs.azure.createRemoteFileSystemDuringInitialization": "true",
						"spark.databricks.delta.preview.enabled": "true"
					},
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "7.1.x-scala2.12",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/key_vault_secrets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/meta_data_configuration_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "key_vault_secrets",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('meta_data_configuration_db_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/key_vault_secrets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/meta_data_configuration_db_v2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "key_vault_secrets",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('meta_data_configuration_db_v2_properties_typeProperties_connectionString_secretName')]"
					},
					"database": "[parameters('meta_data_configuration_db_v2_properties_typeProperties_database')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/key_vault_secrets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/worldwide_importers_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"databaseConnectionStringSecretName": {
						"type": "string",
						"defaultValue": "WorldWideImportersConnectionString"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "key_vault_secrets",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('worldwide_importers_db_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/key_vault_secrets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ssis-purview-demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS package1",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "PurviewDemo/SSIS-With-Purview/Master_Package.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "ssisIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ssisIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data-ingestion-error')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Data From Landing To Error",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start Logging of Activities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "error_ingestion_input_file",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"containerName": {
										"value": "@pipeline().parameters.ingestionContainerName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "data_ingestion_error_output_file",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@pipeline().parameters.errorContainerName",
										"type": "Expression"
									},
									"filePath": {
										"value": "@variables('errorPathName')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete the landing file",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data From Landing To Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "error_ingestion_input_file",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"containerName": {
										"value": "@pipeline().parameters.ingestionContainerName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Set the Error Path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorPathName",
							"value": {
								"value": "@concat(pipeline().parameters.ingestionContainerName, '/', pipeline().RunId)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Start Logging of Activities",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set the Error Path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.loggingBaseURL,'executionlogs/', pipeline().parameters.LogId)",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', pipeline().parameters.BearerToken)",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@concat('{\"childPipelineRundId\": \"', pipeline().RunId, '\",\"childPipelineName\": \"', pipeline().Pipeline, '\",\"childSourceObjectName\": \"/', pipeline().parameters.ingestionContainerName, pipeline().parameters.filePath, '/', pipeline().parameters.fileName, '\", \"childDestinationObjectName\": \"/', pipeline().parameters.errorContainerName, variables('errorPathName'), pipeline().parameters.fileName,  '\", \"childExecutionStatus\": \"Ungoverned\", \"childExecutionStartDate\": \"', utcnow(), '\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Success Logging Activity",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Delete the landing file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.loggingBaseURL,'executionlogs/', pipeline().parameters.LogId, '/', activity('Start Logging of Activities').output.data.childExecutionLogId)",
								"type": "Expression"
							},
							"method": "PATCH",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', pipeline().parameters.BearerToken)",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@concat('{\"childExecutions\": { \"childExecutionStatus\":  \"Ungoverned\", \"childExecutionEndDate\": \"', utcnow(), '\"}}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"ingestionContainerName": {
						"type": "string",
						"defaultValue": "landing"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "orders.avro"
					},
					"filePath": {
						"type": "string",
						"defaultValue": "/"
					},
					"errorContainerName": {
						"type": "string",
						"defaultValue": "error"
					},
					"parentDataFactoryRunId": {
						"type": "string",
						"defaultValue": "b303e2d1-b459-4f33-b6d3-d870ddfee214"
					},
					"LogId": {
						"type": "string"
					},
					"LoggingBaseURL": {
						"type": "string"
					},
					"BearerToken": {
						"type": "string"
					}
				},
				"variables": {
					"errorPathName": {
						"type": "String",
						"defaultValue": "/"
					}
				},
				"folder": {
					"name": "data-ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/error_ingestion_input_file')]",
				"[concat(variables('factoryId'), '/datasets/data_ingestion_error_output_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/process-iot-events')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "process-iot-events",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/phandreo@microsoft.com/batchprocessing",
							"baseParameters": {
								"executionDateTime": {
									"value": "@pipeline().parameters.startDateTime",
									"type": "Expression"
								},
								"iotraweventlocations": "abfss://raw@andrdatalake001d.dfs.core.windows.net/iotevents/",
								"iotporcessedlocations": "abfss://exploration@andrdatalake001d.dfs.core.windows.net/delta-lake/environment-sensor/"
							}
						},
						"linkedServiceName": {
							"referenceName": "databricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"startDateTime": {
						"type": "string",
						"defaultValue": "2020-08-05 03:00:00"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/databricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_sql_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "worldwide_importers_db",
					"type": "LinkedServiceReference",
					"parameters": {
						"databaseConnectionStringSecretName": {
							"value": "@dataset().connectionString",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "etl"
					},
					"objectName": {
						"type": "string",
						"defaultValue": "customers"
					},
					"connectionString": {
						"type": "string",
						"defaultValue": "WorldWideImportersConnectionString"
					}
				},
				"folder": {
					"name": "data-extraction"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().objectName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/worldwide_importers_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data-extraction-sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set objectToExtract",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "objectsToExtract",
							"value": {
								"value": "@pipeline().parameters.platformToExtract[0].sourceObjects",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set keyVaultSecretName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "keyVaultSecretName",
							"value": {
								"value": "@pipeline().parameters.platformToExtract[0].keyVaultSecretName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "set objectToExtract",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set keyVaultSecretName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('objectsToExtract')",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "extract sql tables",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Start Logging of Activities",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "06:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AvroSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "AvroWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "azure_sql_table",
											"type": "DatasetReference",
											"parameters": {
												"schema": {
													"value": "@item().sourcingInformation.sourceSchemaName",
													"type": "Expression"
												},
												"objectName": {
													"value": "@item().sourcingInformation.sourceObject",
													"type": "Expression"
												},
												"connectionString": {
													"value": "@variables('keyVaultSecretName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "avro_ingestion_input_file",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@concat(item().landingZone.destination, '/', pipeline().parameters.sourceDatabaseName)",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().landingZone.fileName",
													"type": "Expression"
												},
												"containerName": {
													"value": "@item().landingZone.containerName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Start Logging of Activities",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(pipeline().parameters.loggingBaseURL,'executionlogs/', pipeline().parameters.LogId)",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Authorization": {
												"value": "@concat('Bearer ', pipeline().parameters.BearerToken)",
												"type": "Expression"
											}
										},
										"body": {
											"value": "@concat('{\"childPipelineRundId\": \"', pipeline().RunId, '\",\"childPipelineName\": \"', pipeline().Pipeline, '\",\"childSourceObjectName\": \"', item().sourcingInformation.sourceSchemaName, '.', item().sourcingInformation.sourceObject, '\", \"childDestinationObjectName\": \"/', item().landingZone.containerName, item().landingZone.destination, pipeline().parameters.sourceDatabaseName, '/', item().landingZone.fileName, '\", \"childExecutionStatus\": \"In-Progress\", \"childExecutionStartDate\": \"', utcnow(), '\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Logging Activity",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "extract sql tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(pipeline().parameters.loggingBaseURL,'executionlogs/', pipeline().parameters.LogId, '/', activity('Start Logging of Activities').output.data.childExecutionLogId)",
											"type": "Expression"
										},
										"method": "PATCH",
										"headers": {
											"Authorization": {
												"value": "@concat('Bearer ', pipeline().parameters.BearerToken)",
												"type": "Expression"
											}
										},
										"body": {
											"value": "@concat('{\"childExecutions\": { \"childExecutionStatus\":  \"Success\", \"childExecutionEndDate\": \"', utcnow(), '\"}}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Failure Logging Activity",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "extract sql tables",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(pipeline().parameters.loggingBaseURL,'executionlogs/', pipeline().parameters.LogId, '/', activity('Start Logging of Activities').output.data.childExecutionLogId)",
											"type": "Expression"
										},
										"method": "PATCH",
										"headers": {
											"Authorization": {
												"value": "@concat('Bearer ', pipeline().parameters.BearerToken)",
												"type": "Expression"
											}
										},
										"body": {
											"value": "@concat('{\"childExecutions\": { \"childExecutionStatus\":  \"Failure\", \"childExecutionEndDate\": \"', utcnow(), '\"}}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"platformToExtract": {
						"type": "array",
						"defaultValue": [
							{
								"_id": "5ecfcfa73e095f1d78ff3521",
								"sourceDatabaseName": "WorldWideImporters",
								"sourceObjects": [
									{
										"sourcingInformation": {
											"sourceSchemaName": "etl",
											"sourceObject": "customers",
											"loadType": "full"
										},
										"landingZone": {
											"fileName": "customers.avro",
											"destination": "/",
											"fileType": "avro",
											"containerName": "landing"
										},
										"rawZone": {
											"fileName": "customers.parquet",
											"destination": "/WorldWideImporters/Customers",
											"fileType": "parquet",
											"containerName": "raw"
										},
										"_id": "5ecfea681e8b9a4cfcad5e86",
										"name": "Customers",
										"description": "Worldwide Importers Customer Information",
										"columnCount": 29
									},
									{
										"sourcingInformation": {
											"sourceSchemaName": "etl",
											"sourceObject": "invoices",
											"loadType": "incremental"
										},
										"landingZone": {
											"fileName": "invoices.avro",
											"destination": "/",
											"fileType": "avro",
											"containerName": "landing"
										},
										"rawZone": {
											"fileName": "invoices.parquet",
											"destination": "/WorldWideImporters/Invoices",
											"fileType": "parquet",
											"containerName": "raw"
										},
										"_id": "5ecfed961e8b9a4cfcad5e87",
										"name": "Invoices",
										"description": "Worldwide Importers Invoices Information",
										"columnCount": 29
									}
								],
								"keyVaultSecretName": "WorldWideImportersConnectionString",
								"serverName": "mtcchioltp001d.database.windows.net",
								"databaseType": "SqlServer"
							}
						]
					},
					"sourceDatabaseName": {
						"type": "string",
						"defaultValue": "WorldWideImporters"
					},
					"LogId": {
						"type": "string",
						"defaultValue": "5ecfed961e8b9a4cfcad5e87"
					},
					"BearerToken": {
						"type": "string",
						"defaultValue": "1234"
					},
					"loggingBaseURL": {
						"type": "string"
					}
				},
				"variables": {
					"objectsToExtract": {
						"type": "Array",
						"defaultValue": [
							{
								"sourcingInformation": {
									"sourceSchemaName": "etl",
									"sourceObject": "customers",
									"loadType": "full"
								},
								"landingZone": {
									"fileName": "customers.avro",
									"destination": "/",
									"fileType": "avro",
									"containerName": "landing"
								},
								"rawZone": {
									"fileName": "customers.parquet",
									"destination": "/WorldWideImporters/Customers",
									"fileType": "parquet",
									"containerName": "raw"
								},
								"_id": "5ecfea681e8b9a4cfcad5e86",
								"name": "Customers",
								"description": "Worldwide Importers Customer Information",
								"columnCount": 29
							},
							{
								"sourcingInformation": {
									"sourceSchemaName": "etl",
									"sourceObject": "invoices",
									"loadType": "incremental"
								},
								"landingZone": {
									"fileName": "invoices.avro",
									"destination": "/",
									"fileType": "avro",
									"containerName": "landing"
								},
								"rawZone": {
									"fileName": "invoices.parquet",
									"destination": "/WorldWideImporters/Invoices",
									"fileType": "parquet",
									"containerName": "raw"
								},
								"_id": "5ecfed961e8b9a4cfcad5e87",
								"name": "Invoices",
								"description": "Worldwide Importers Invoices Information",
								"columnCount": 29
							}
						]
					},
					"keyVaultSecretName": {
						"type": "String",
						"defaultValue": "WorldWideImportersConnectionString"
					},
					"sourceDatabaseName": {
						"type": "String",
						"defaultValue": "WorldWideImporters"
					}
				},
				"folder": {
					"name": "data-extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azure_sql_table')]",
				"[concat(variables('factoryId'), '/datasets/avro_ingestion_input_file')]"
			]
		}
	]
}